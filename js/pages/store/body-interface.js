import { internalData } from "../../data/internalData.js";
import { deleteElement, selectElement, createElement, addListener, modifyClassNames } from "../../utils/manage-elements.js";
import { addParams, findParam, modifyParams, removeParams } from "../../utils/url-params.js"
import cardCategoryPreview from "./card-category-preview.js";
import { openProductOverview } from "./grid-product-overview.js";


export function bodyInterface() {
  const textPrompt= createElement("div", "position-absolute w-100 d-flex justify-content-center", "style | id", "top: 3rem | prompt", "", 
  `<h2 class="h6 text-primary-variant">Click body part to begin</h2>`)
  selectElement('#interface-container').append(template(), textPrompt);
  const mapElements = selectElement('#map-coord').childNodes;
  correctMapCoordinates();
  window.addEventListener("resize", correctMapCoordinates)
  addOverlay();
  mapElements.forEach(element => {
    if(element.className === "body-part") {
      element.addEventListener("click", () => {
        let id = element.id
        if(id === "left-arm" || id === "right-arm") {
          id = "arms";
        }
        interfaceActive(id);
        addParams("&category=" + id);
        })
      }
  })
}

function template() {
  const container = createElement("div", "w-100 d-flex justify-content-center align-items-center position-relative fade-in", "style | id", "height: 100vh | body-interface");
  const template = `
  <img src="./media/icon-man-body-parts/body_base.png" alt="body_interface" id="body-png" class="position: absolute" style="height: 70%; min-height: 500px; width: auto; z-index: 1000" usemap="#image-map" width="546" height="1549">
  <!-- Image Map Generated by http://www.image-map.net/ -->
  <map id="map-coord" class="pointer" name="image-map">
    <!--Data attribute contains coordinates for the original image size. 
      JS is used for scaling coordinates on resize event and replacing the coordinates in the coord-attribute accordingly-->
      <area class="body-part" id="left-arm" alt="left-arm" title="left-arm" 
      coords="6,559,28,421,117,346,140,430,102,561,61,742,13,693" 
      data="6,559,28,421,117,346,140,430,102,561,61,742,13,693" shape="poly">
      <area class="body-part" id="right-arm" alt="right-arm" title="right-arm" 
      coords="438,534,406,388,430,347,516,419,537,553,531,709,483,737,439,621" 
      data="438,534,406,388,430,347,516,419,537,553,531,709,483,737,439,621" shape="poly">
      <area class="body-part" id="legs" alt="legs" title="legs" 
      coords="167,1384,119,1382,92,1184,112,873,131,698,160,652,254,749,284,747,383,664,411,706,425,859,430,1169,418,1379,365,1375,316,1210,297,1018,260,1021,219,1243" 
      data="167,1384,119,1382,92,1184,112,873,131,698,160,652,254,749,284,747,383,664,411,706,425,859,430,1169,418,1379,365,1375,316,1210,297,1018,260,1021,219,1243" shape="poly">
      <area class="body-part" id="torso" alt="torso" title="torso" 
      coords="147,612,260,718,284,723,398,612,394,407,337,431,278,402,198,433,152,405" 
      data="147,612,260,718,284,723,398,612,394,407,337,431,278,402,198,433,152,405" shape="poly">
      <area class="body-part" id="head" alt="head" title="head" 
      coords="221,164,248,196,284,196,339,159,354,88,336,3,224,2,189,77,194,126" 
      data="221,164,248,196,284,196,339,159,354,88,336,3,224,2,189,77,194,126" shape="poly">
      <area class="body-part" id="chest" alt="chest" title="chest" 
      coords="145,386,121,338,181,285,253,289,361,286,421,338,397,389,345,416,280,380,263,381,199,417" 
      data="145,386,121,338,181,285,253,289,361,286,421,338,397,389,345,416,280,380,263,381,199,417" shape="poly">
  </map>
  `;
  container.innerHTML = template;
  return container;
}

function correctMapCoordinates () {
  console.log("ran correctMapCoordinates")
  const bodyPng = selectElement('#body-png')
  const originalHeight = bodyPng.getAttribute("height");
  const adjustedHeight = bodyPng.height;
  const ratio = adjustedHeight/originalHeight;
  selectElement('#map-coord').childNodes.forEach(element => {
    if(element.className === "body-part") {
      const coordArray = element.getAttribute("data").split(",")
      const adjustedCoordArray = coordArray.map(coord => {
        return (coord * ratio).toFixed(2);
      })
      element.coords = adjustedCoordArray.toString("");
    }
  })
}

export function interfaceActive(id) {
  //Going from step 1 to step 2
  const interfaceContainer = selectElement('#interface-container');
  modifyClassNames("#prompt", "d-none")
  toggleOverlay(true, id);
  cardCategoryPreview(interfaceContainer, id);
  addListener(
    selectElement(['#back-button', '#proceed-button']),
    [
      () => {
        modifyClassNames(selectElement("#body-png-overlay-"+id), "fade-out", "fade-in");
        deleteElement("#info-modular-1");
        removeParams("category")
        setTimeout(() => {
          toggleOverlay(false, id);
        }, 600)
      }, 
      () => {
          modifyClassNames(selectElement("#body-png-overlay"), "", "fade-in");
          modifyParams("step", "2");
          modifyClassNames(selectElement("#info-modular-1"), "d-none");
          moveFigure("increase", id);
          openProductOverview(id);
        }
      ]
  )
}

export function moveFigure(scaleUp = "increase", id) {
  const overlay = selectElement("#body-png-overlay-"+id);
  const png = selectElement("#body-png")
  if(scaleUp === "increase") {
    modifyClassNames(overlay, "body-scale-up");
    modifyClassNames(png, "opacity-0");
  } if(scaleUp === "decrease") {
    modifyClassNames(overlay, "body-scale-down", "body-scale-up");
    setTimeout(() => {
      modifyClassNames(overlay, "", "body-scale-down | fade-in");
      modifyClassNames(png, "", "opacity-0");
    }, 1000)
  }
}

export function addOverlay() {
  const overlay = createElement("div", ["w-100", "d-flex", "justify-content-center", "align-items-center", "position-absolute", "d-none"], 
  ["style", "id"], ["height: 100vh; top: 0; overflow: hidden", "body-overlay"]);
  internalData.forEach(item => {
    const id = item[0];
    const imageElement = createElement("img", "pointer fade-in d-none body-png-overlay", "id | style | alt", [`body-png-overlay-${id}`, "width: auto; z-index: 5000", "active-body-part"])
    //const template = `<img src="${id}" alt="active-body-part" id="body-png-overlay-${id}" class="pointer fade-in d-none" style="width: auto; z-index: 5000">`
    overlay.append(imageElement)
    function setSource(fileName) {
        const path = "../../media/icon-man-body-parts/"
        imageElement.src = path + fileName;
    }
    switch(id) {
      case("head"):
        setSource("active_head.png");
        break
      case("torso"):
        setSource("active_torso.png");
        break
      case("arms"):
        setSource("active_arms.png");
        break
      case("legs"):
        setSource("active_legs.png");
        break
      case("chest"):
        setSource("active_chest.png");
        break
      default:
        setSource("");
    }
  })
  selectElement('#interface-container').append(overlay)
}

function toggleOverlay(reveal, catId) {
  const overlay = selectElement("#body-overlay");
  const png = selectElement("#body-png-overlay-"+catId);
  if(reveal) {
    modifyClassNames([png, overlay], "", "d-none");
    modifyClassNames(png, "fade-in", "fade-out");
  } else {
    modifyClassNames([png, overlay], "d-none");
    modifyClassNames([png], "fade-out", "fade-in");
  }
}